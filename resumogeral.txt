PARA COMEÇAR UMA APLICAÇÃO ANGULAR, USAR:

ng new nome_da_aplicação --prefix=prefixo_dos_arquivos

ng serve

COMPONENTES SÃO PEQUENAS PARTES INDEPENDENTES E REUSÁVEIS
ELEMENTOS PERSONALIZADOS

import { Component } from '@angular/core'

@Component({
    selector: 'app-first',
    templateUrl: './myfirst.component.html'
    /**** template: `<h1>{{title}}</h1>
                 <p>Welcome, {{user.name}}!</p>` ******/
})

export class MyFirstComponent{
    
    constructor() {}

    title: string = 'My Star Wars Component!'

    user = {name: 'Luke Skywalker'}

}

necessário informar o @NgModule

ng generate component NOME_DO_COMPONENTE

ng g c NOME_DO_COMPONENTE

property binding é linkar um valor de um componente com um elemento do DOM ou componentes angular, []

como passar dados para um componente? avisar ao angular quais propriedades pode receber dados dos parents.

@input ()

O QUE É UMA DIRETIVA?

adiciona comportamento ao elemento dom, porém não têm template.
Podem ser componentes, estruturais ou de atributos

*ngIf

*ngFor

EVENTOS sintaxe - ()
EVENTEMMITER - this.myEvent.emit()

é possível referenciar outras tags através de uma chamada
    <button (click)="description.focus()">Focus!</button>
    <br />
    <textarea #description></textarea>

ERROS SÃO REPORTADOS EM:

- compilação do webpack
- console do browser

O QUE SÃO ROTAS?

usando <router-outlet></router-outlet>

mapeando as rotas:

export const ROUTES: Route = [
    { path: '', component: RestaurantsComponent },
    { path: 'restaurant/:id', component: RestaurantComponent },
    { path: 'about', component: AboutComponent },

]

e declarar no @NgModule

@NgModule({
    declarations: [...],
    imports: [..., RouterModule.forRoot(ROUTES)]
})
export class AppModule

COMO CHAMAR A ROTA

existe um atributo routerLink
<a routerLink="/restaurants">Restaurantes</a>
ou então
<a [routerLink]="['/restaurants']">Restaurantes</a>

O QUE SÃO SERVIÇOS

Serviços são classes comuns usadas para injetar em componentes ou outros serviços,
guardar dados.

3 escopos:
MÓDULO ..................... providers: []
COMPONENTE E SEUS FILHOS ... providers: []
SOMENTE COMPONENTE ......... viewProviders: []

serviços podem solicitar injeção de outros serviços
@Injectable() ...... apenas receber serviços

exemplo Title
Como o title fica no head e não faz parte do bootstrap,
criaram esse serviço para alterá-lo

A ideia de programação reativa é um evento acontece e os que estão identificados ficam esperando para fazer algo.
listeners
REACTIVE = ITERATOR + OBSERVER
angular usa o RXJS

Observable.from([1, 2, 3, 4, 5]) .............. STREAM
    .map( x => x + 3 ) ........................ TRANSFORMAÇÃO
    .filter(x => x% 2 == 0)
    .subscribe(x => console.log(x))//4, 6, 8... LISTENER

Diferença entre OBSERVABLE e PROMISES
OBSERVABLE => Múltiplos Eventos
PROMISES => Se resolve depois de um Evento

Os métodos da API "HTTP" retornam OBSERVABLE<RESPONSE>

get, post, put, delete, head, options

this.http.get('/url')
    .map( response => response.json() )
    .subscribe( data => this.mydata = data )

subscribe / unsubscribe

unsubscribe para evitar memory leaks
http, router e async não precisam de unsubscribe

LIDANDO COM ERROS (subscribe / unsubscribe)

operador catch

save (myData){
    return this.http.post('/url', JSON.stringify(myData))
        .map(response => response.json())
        .map(result => result.id).
        catch(error => {
            console.log(error)
            Observable.throw(`Error posting ${myData}`)
        })
}

CONFIGURANDO A API DE BACKEND (JSON-SERVER)

npm install -g json-server

json-server db.json

COMO PASSAR E OBTER PARÂMETROS (ROTAS)

export const ROUTES: Route = [
    { path: 'restaurant/:id', component: RestaurantComponent }
]

<!-- PASSANDO UM PARÂMETRO -->
<a [routerLink]="['/restaurants', restaurant.id]">Bakery</a>

2 FORMAS DE OBTER PARÂMETROS

- a partir de SNAPSHOT, que é uma "fotografia" dos parâmetros no momento que pedir.

- SUBSCRIBE, se inscrevendo na rota e escutando a mudança de parâmetros.

SNAPSHOT -> mais comum, mais usado

export class MyComponent implements OnInit {
    myObj: any

    constructor(private route:ActivatedRoute) {}

    ngOnInit(){
        const id = this.route.snapshot.params['id']
        this.myObj = // ...obter os dados baseado no id
    }
}

SUBSCRIBE -> reactive programming

export class MyComponent implements OnInit {
    myObj: any

    constructor(private route:ActivatedRoute) {}

    ngOnInit(){
        this.route.params.subscribe(params => {
            const id = params['id']
            this.myObj = // ...obter os dados baseado no id
        })
    }
}


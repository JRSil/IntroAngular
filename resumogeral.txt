npm install -g @angular/cli

ng -v
node -v

PARA COMEÇAR UMA APLICAÇÃO ANGULAR, USAR:

ng new nome_da_aplicação --prefix=prefixo_dos_arquivos

ng serve

COMPONENTES SÃO PEQUENAS PARTES INDEPENDENTES E REUSÁVEIS
ELEMENTOS PERSONALIZADOS

Possuem uma classe, um template e um selector (tag que será utilizada pra executá-los)

import { Component } from '@angular/core'

@Component({//.....................DECORATOR
    selector: 'app-first',
    templateUrl: './myfirst.component.html'
    /**** template: `<h1>{{title}}</h1>
                 <p>Welcome, {{user.name}}!</p>` ******/
})

export class MyFirstComponent{
    
    constructor() {}

    title: string = 'My Star Wars Component!'

    user = {name: 'Luke Skywalker'}

}

necessário informar o @NgModule

@NgModule({
    declarations: [MyFirstComponent]
})
export class appModule {}

ng generate component NOME_DO_COMPONENTE

ng g c NOME_DO_COMPONENTE

property binding é linkar um valor de um componente com um elemento do DOM 
ou componentes angular, []

//no componente
user = {name: 'Luke Skywalker'}

<!--no template do componente-->
<input type="text" [value]="user.name">

como passar dados para um componente? 
avisar ao angular quais propriedades pode receber dados dos parents.

@input ()

O QUE É UMA DIRETIVA?

adiciona comportamento ao elemento dom, porém não têm template.
Podem ser componentes, estruturais ou de atributos

*ngIf

*ngFor

<div [ngSwitch]="profile">
    <p *ngSwitchCase="root">You can read & write</p>
    <p *ngSwitchCase="user">You can read</p>
    <p *ngSwitchCaseDefault>Go back, please!</p>
</div>

OPERADOR DE NAVEGAÇÃO SEGURA - é o "?"
*ngIf="student?.isJedi"

EVENTOS sintaxe - ()
Pode chamar variável no evento, ex: $event

<button (click)="clicked($event)">Focus!</button>

no caso de keydown, é possível colocar a tecla depois do ponto

<input (keydown.space)="KeyDown($event)">

EVENTEMMITER - this.myEvent.emit()

é possível referenciar outras tags através de uma chamada
    <button (click)="description.focus()">Focus!</button>
    <br />
    <textarea #description></textarea>

ERROS SÃO REPORTADOS EM:

- compilação do webpack
- console do browser

O QUE SÃO ROTAS?

usando <router-outlet></router-outlet>

mapeando as rotas:

export const ROUTES: Route = [
    { path: '', component: RestaurantsComponent },
    { path: 'restaurant/:id', component: RestaurantComponent },
    { path: 'about', component: AboutComponent },

]

e declarar no @NgModule

@NgModule({
    declarations: [...],
    imports: [..., RouterModule.forRoot(ROUTES)]
})
export class AppModule

COMO CHAMAR A ROTA

existe um atributo routerLink
<a routerLink="/restaurants">Restaurantes</a>
ou então
<a [routerLink]="['/restaurants']">Restaurantes</a>

O QUE É INJEÇÃO DE DEPENDÊNCIA?

É um padrão de projeto onde a aplicação deixa de instanciar seus objetos manualmente
e passa a depender do framework para obter esses objetos.

Ele gerencia a instanciação dos objetos e suas dependências.

O QUE SÃO SERVIÇOS

Serviços são classes comuns usadas para injetar em componentes ou outros serviços,
guardar dados.

3 escopos:
MÓDULO ..................... providers: []
COMPONENTE E SEUS FILHOS ... providers: []
SOMENTE COMPONENTE ......... viewProviders: []

serviços podem solicitar injeção de outros serviços
@Injectable() ...... apenas receber serviços

exemplo Title
Como o title fica no head e não faz parte do bootstrap,
criaram esse serviço para alterá-lo

A ideia de programação reativa é um evento acontece e os que estão interessados
ficam esperando para fazer algo.listeners

REACTIVE = ITERATOR + OBSERVER
angular usa o RXJS

Observable.from([1, 2, 3, 4, 5]) .............. STREAM
    .map( x => x + 3 ) ........................ TRANSFORMAÇÃO
    .filter(x => x% 2 == 0)
    .subscribe(x => console.log(x))//4, 6, 8... LISTENER

Diferença entre OBSERVABLE e PROMISES
OBSERVABLE => Múltiplos Eventos
PROMISES => Se resolve depois de um Evento

Os métodos da API "HTTP" retornam OBSERVABLE<RESPONSE>

get, post, put, delete, head, options

this.http.get('/url')
    .map( response => response.json() )
    .subscribe( data => this.mydata = data )

subscribe / unsubscribe

unsubscribe para evitar memory leaks
http, router e async não precisam de unsubscribe

LIDANDO COM ERROS (subscribe / unsubscribe)

operador catch

save (myData){
    return this.http.post('/url', JSON.stringify(myData))
        .map(response => response.json())
        .map(result => result.id).
        catch(error => {
            console.log(error)
            Observable.throw(`Error posting ${myData}`)
        })
}

CONFIGURANDO A API DE BACKEND (JSON-SERVER)

npm install -g json-server

json-server db.json

COMO PASSAR E OBTER PARÂMETROS (ROTAS)

export const ROUTES: Route = [
    { path: 'restaurant/:id', component: RestaurantComponent }
]

<!-- PASSANDO UM PARÂMETRO -->
<a [routerLink]="['/restaurants', restaurant.id]">Bakery</a>

2 FORMAS DE OBTER PARÂMETROS

- a partir de SNAPSHOT, que é uma "fotografia" dos parâmetros no momento que pedir.

- SUBSCRIBE, se inscrevendo na rota e escutando a mudança de parâmetros.

SNAPSHOT -> mais comum, mais usado

export class MyComponent implements OnInit {
    myObj: any

    constructor(private route:ActivatedRoute) {}

    ngOnInit(){
        const id = this.route.snapshot.params['id']
        this.myObj = // ...obter os dados baseado no id
    }
}

SUBSCRIBE -> reactive programming

export class MyComponent implements OnInit {
    myObj: any

    constructor(private route:ActivatedRoute) {}

    ngOnInit(){
        this.route.params.subscribe(params => {
            const id = params['id']
            this.myObj = // ...obter os dados baseado no id
        })
    }
}

O QUE SÃO PIPES

são responsáveis por transformações de dados para uma apresentação diferente.
ex: lowercase, uppercase

O QUE SÃO TEMPLATE FORMS

forma declarativa de configurar os formulários no template

ngModel - usado nos templates

valid | invalid
pristine (estado inicial) | dirty (usuário alterou algo)
untouched (estado inicial) | touched (usuário entrou no campo)

#ipt="ngModel"
*ngIf="ipt.invalid"

Validators

required - campo obrigatório
pattern - regex - recebe um padrão regular
minlength & maxlength - recebe um número e checam se está válido

Para dar um feedback ao usuário, o angular associa classes do css

ng-valid | ng-invalid
ng-pristine | ng-dirty
ng-untouched | ng-touched

Atributo PATTERN no input, possiblita o uso de regex para validação.

REACTIVE FORMS

nova forma de implementar formulários

export class UserComponent implements OnInit {
    userForm: FormGroup

    constructor(private fb: FormBuilder){}

    ngOnInit(){
        this.userForm = this.fb.group({
            //userName: '',
            //password: ''
            
            //username: this.fb.control(''),
            //password: this.fb.control('') ......... FormControl
            
            //os validadores podem ser inseridos em forma de array
            
            username: this.fb.control('', [Validators.required]),
            password: this.fb.control('', [Validators.minlength(3)])
            address: this.fb.group({
                street: '',
                zip: ''
            })
        })
    }
}

REACTIVE FORMS - TEMPLATE

<!-- SEM ngModel -->
<form [formGroup]="userForm">
    <input type="text" formControlName="username" />
    <input type="password" formControlName="password" />

    <div formGroupName="address">
        <input type="text" formControlName="street" />
        <input type="text" formControlName="zip" />
    </div>
</form>

O QUE SÃO MÓDULOS

itens de configuração framework, agrega componentes, diretivas, serviços ou pipes
(organização da aplicação)

tipos
- root module (bootstrap da aplicação)
- shared (componentes, diretivas e pipes)
- core modules (apenas serviços)
- feature module (implementações de funcionalidades)

@NGModule({
    declarations: [...],
    imports: [...],
    providers: [...],
    exports: [...]
})
export class MyModule{}

WEB ANIMATIONS API - Animações

a partir do angular 4, é possível importar @angular/animations

@Component({
    template: `<button [@stretch]="buttonState">Click</button>`
    animations: [
        trigger('stretch' , [
            state('normal', style({width: '40px'})),
            state('stretched', style({width: '120px'})),
            //transition('normal => stretched', animate('500ms')),
            //transition('stretched => normal', animate('500ms'))
            transition('* => *', animate('500ms'))
        ])
    ]
})
export class ButtonComponent { buttonState = 'normal' }

O Angular fornece 2 estados, que são:

wildcard (*) Representa qualquer estado

void - Transição que não está na árvore de componentes ainda, ou que vai sair da árvore

- NECESSÁRIO INSTALAR MÓDULOS
npm install --save @angular/animations@4.0.0
npm install --save web-animations-js

corrigir o polyfills.ts 
import 'web-animations-js/web-animations.min.js'

ANIMAÇÕES COM KEYFRAMES

são animações que contém vários marcos ou passos.
é colocado no fim do atributo animate

transition('st1 => st2', [
    animate('500ms 0s ease-in-out', keyframes ([ //recebe um array de estilos
        style({transform:'transform(0px,0px)', offset:0}),
        style({transform:'transform(100px,0px)', offset:0.6}), //offset vai de 0 a 1
        style({transform:'transform(140px,-30px)', offset:1})
    ]))
])
//não necessariamente precisa ser só transform
transition('st1 => st2', [
    animate('500ms 0s ease-in-out', keyframes ([
        style({opacity: 0, width: '100px', offset:0}),
        style({opacity: 0.8, width: '120px', offset:0.8}),
        style({opacity: 1, width: '100px'', offset:1})
    ]))
])

@angular/animations - web-animations-js (polyfill)
browser animations module (app module)

para definir
utilizar função trigger,
podem ter estilos
pode utilizar estados especiais como void e wildcard
    - wildcard para representar uma transição pra qualquer estado
    - void para representar o estado quando o elemento não está no DOM

função animate define:
    - duração: ms/s
    - delay: ms/s
    - aceleração (easing)

keyframes possibilitam animações mais complexas, por utilizar vários marcos.

Propriedades:
CSS3 Transitions
CSS3 Animations
w3.org/TR/css3-transitions/#animatable-properties

NG BUILD - mesma função do ng serve, porém prepara tudo para funcionar dessa forma, 
ao invés de rodar em tempo real

ng build --prod
faz a compilação para produção

python -m SimpleHTTPServer 8000
Não é possível acessar um link diretamente, somente entrando pela home. 

Para resolver este problema, usamos a estratégia de navegação HASH.

import {LocationStrategy, HashLocationStrategy} from '@angular/common';
providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}, {provide: LOCALE_ID, useValue: 'pt-BR'}]

no app.module.ts

Configurar app.api.ts, usando arquivos da pasta environment.

DEPLOY NO APACHE HTTP SERVER

levar o conteudo para a pasta, após o ng build --prod
no meu caso, htdocs...

reescrever a regra no .htaccess ou no arquivo do apache "httpd.conf" => document_root:

RewriteEngine On
    # If an existing asset or directory is requested go to it as it is
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d
    RewriteRule ^ - [L]
    # If the requested resource doesn't exist, use index.html
RewriteRule ^ /index.html

no HTTPD.CONF é necessário habilitar o LoadModule rewrite_module

CASO FAÇA PELO .HTACCESS...

Necessário alterar o "AllowOverride" para "All" no HTTPD.CONF
